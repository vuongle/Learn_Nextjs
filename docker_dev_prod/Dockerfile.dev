# build command
# docker build -f Dockerfile.dev -t nextjs_docker_dev_prod --build-arg NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=your_key_here .

# STAGE 1
FROM node:22-slim AS base

ARG PORT=3000

# prevents Next.js from sending telemetry data to Vercel servers.
ENV NEXT_TELEMETRY_DISABLED=1

WORKDIR /app


# STAGE 2
FROM base AS dependencies

COPY package.json package-lock.json ./
RUN npm ci


# STAGE 3
FROM base AS build

COPY --from=dependencies /app/node_modules ./node_modules
COPY . .

# Public build-time environment variables
# If we need any public environment variables at build time, we must specify them here as ARG’s and 
# later pass them to the docker build command (--build-arg)
ARG NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY
ENV NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=$NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY

RUN npm run build


# STAGE 4

FROM base AS run

ENV NODE_ENV=production
ENV PORT=$PORT

# create a new user and group, which we’ll use to run the Next.js Node.js process. This ensures that 
# the Node.js process can only access the bar minimum data inside the container
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs
# create a new .next directory and setting its permissions
RUN mkdir .next
RUN chown nextjs:nodejs .next

COPY --from=build /app/public ./public
# Note that we COPY a /app/.next/standalone directory. To make the Next.js build script generate this 
# Docker-optimized standalone build, we need to update our next.config.mjs file
COPY --from=build --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=build --chown=nextjs:nodejs /app/.next/static ./.next/static

# switch/change to the newly created nextjs user
USER nextjs

EXPOSE $PORT

ENV HOSTNAME="0.0.0.0"
CMD ["node", "server.js"]